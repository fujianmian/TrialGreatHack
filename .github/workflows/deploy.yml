name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-5

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-5 | docker login --username AWS --password-stdin 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com

      - name: Build Docker image
        run: |
          docker build --no-cache -t myapp:${{ github.sha }} .
          docker tag myapp:${{ github.sha }} 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}

      - id: task-def
        name: Update ECS task definition with new image
        run: |
          echo "=== Step 1: Fetching current task definition ==="
          aws ecs describe-task-definition --task-definition nextjs-task:1 \
            --query "taskDefinition" \
            --output json > taskdef.json
          
          echo "Current task definition fetched:"
          cat taskdef.json
          
          echo ""
          echo "=== Step 2: Modifying task definition ==="
          NEW_IMAGE="242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}"
          
          jq --arg IMAGE "$NEW_IMAGE" --arg OPENAI_KEY "${{ secrets.OPENAI_API_KEY }}" '
            {
              family: .family,
              taskRoleArn: .taskRoleArn,
              executionRoleArn: .executionRoleArn,
              networkMode: .networkMode,
              containerDefinitions: .containerDefinitions,
              requiresCompatibilities: .requiresCompatibilities,
              cpu: .cpu,
              memory: .memory
            } |
            .containerDefinitions[0].image = $IMAGE |
            .containerDefinitions[0].environment = (
              (.containerDefinitions[0].environment // []) | 
              map(select(.name != "OPENAI_API_KEY"))
            ) + [{"name": "OPENAI_API_KEY", "value": $OPENAI_KEY}]
          ' taskdef.json > new-taskdef.json
          
          echo "Modified task definition:"
          cat new-taskdef.json
          
          echo ""
          echo "=== Step 3: Registering new task definition ==="
          REGISTER_OUTPUT=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json 2>&1)
          REGISTER_EXIT_CODE=$?
          
          echo "Register command output:"
          echo "$REGISTER_OUTPUT"
          echo "Exit code: $REGISTER_EXIT_CODE"
          
          if [ $REGISTER_EXIT_CODE -ne 0 ]; then
            echo "ERROR: Failed to register task definition"
            exit 1
          fi
          
          TASKDEF_ARN=$(echo "$REGISTER_OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn')
          
          echo ""
          echo "=== Step 4: Extracted task definition ARN ==="
          echo "TASKDEF_ARN: $TASKDEF_ARN"
          
          if [ -z "$TASKDEF_ARN" ] || [ "$TASKDEF_ARN" = "null" ]; then
            echo "ERROR: Failed to extract task definition ARN"
            exit 1
          fi
          
          echo "taskdef_arn=$TASKDEF_ARN" >> $GITHUB_OUTPUT
          echo "Successfully set output: taskdef_arn=$TASKDEF_ARN"

      - name: Verify output was set
        run: |
          echo "Task definition ARN from output: ${{ steps.task-def.outputs.taskdef_arn }}"
          if [ -z "${{ steps.task-def.outputs.taskdef_arn }}" ]; then
            echo "ERROR: taskdef_arn output is empty!"
            exit 1
          fi

      - name: Update ECS Service to use new task definition
        run: |
          echo "Updating ECS service with new task definition..."
          echo "Task Definition ARN: ${{ steps.task-def.outputs.taskdef_arn }}"
          
          aws ecs update-service \
            --cluster my-app-cluster \
            --service nextjs-task-service-t2q09utt \
            --task-definition "${{ steps.task-def.outputs.taskdef_arn }}" \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster my-app-cluster \
            --services nextjs-task-service-t2q09utt
          echo "Deployment completed successfully!"