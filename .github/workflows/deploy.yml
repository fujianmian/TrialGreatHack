name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-5

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-5 | docker login --username AWS --password-stdin 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com

      - name: Build Docker image
        run: |
          docker build --no-cache -t myapp:${{ github.sha }} .
          docker tag myapp:${{ github.sha }} 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push 242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}

      - id: task-def
        name: Update ECS task definition with new image
        run: |
          aws ecs describe-task-definition --task-definition nextjs-task:1 \
            --query "taskDefinition.{family:family, taskRoleArn:taskRoleArn, executionRoleArn:executionRoleArn, networkMode:networkMode, containerDefinitions:containerDefinitions, volumes:volumes, placementConstraints:placementConstraints, requiresCompatibilities:requiresCompatibilities, cpu:cpu, memory:memory, tags:tags, pidMode:pidMode, ipcMode:ipcMode, proxyConfiguration:proxyConfiguration, inferenceAccelerators:inferenceAccelerators, ephemeralStorage:ephemeralStorage, runtimePlatform:runtimePlatform, enableFaultInjection:enableFaultInjection}" \
            --output json > taskdef.json

          NEW_IMAGE="242038040781.dkr.ecr.ap-southeast-5.amazonaws.com/my-ecr-repo:${{ github.sha }}"
          jq --arg IMAGE "$NEW_IMAGE" --arg OPENAI_KEY "${{ secrets.OPENAI_API_KEY }}" '
            del(.tags, .pidMode, .ipcMode, .proxyConfiguration, .inferenceAccelerators, .ephemeralStorage) |
            .containerDefinitions[0].image=$IMAGE |
            .containerDefinitions[0].environment = (.containerDefinitions[0].environment // []) |
            .containerDefinitions[0].environment |= map(select(.name != "OPENAI_API_KEY")) + [{"name": "OPENAI_API_KEY", "value": $OPENAI_KEY}]
          ' taskdef.json > new-taskdef.json

          TASKDEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json | jq -r '.taskDefinition.taskDefinitionArn')
          echo "New task definition ARN: $TASKDEF_ARN"
          echo "taskdef_arn=$TASKDEF_ARN" >> $GITHUB_OUTPUT

      - name: Check if service needs recreation
        id: check-service
        run: |
          # Get current service configuration
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster my-app-cluster \
            --services nextjs-task-service-t2q09utt \
            --query 'services[0]' \
            --output json)
          
          # Get the target group ARN from service
          SERVICE_TG=$(echo $SERVICE_INFO | jq -r '.loadBalancers[0].targetGroupArn // empty')
          
          # Get the actual target group ARN
          ACTUAL_TG=$(aws elbv2 describe-target-groups \
            --names my-app-targetgroup \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          echo "Service Target Group: $SERVICE_TG"
          echo "Actual Target Group: $ACTUAL_TG"
          
          if [ "$SERVICE_TG" != "$ACTUAL_TG" ]; then
            echo "Target group mismatch detected. Service needs to be recreated."
            echo "needs_recreation=true" >> $GITHUB_OUTPUT
          else
            echo "Target group matches. Service can be updated normally."
            echo "needs_recreation=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete and Recreate Service (if needed)
        if: steps.check-service.outputs.needs_recreation == 'true'
        run: |
          echo "Deleting old service..."
          
          # Get service configuration for recreation
          SERVICE_CONFIG=$(aws ecs describe-services \
            --cluster my-app-cluster \
            --services nextjs-task-service-t2q09utt \
            --query 'services[0]' \
            --output json)
          
          # Delete the service
          aws ecs delete-service \
            --cluster my-app-cluster \
            --service nextjs-task-service-t2q09utt \
            --force
          
          echo "Waiting for service to be deleted..."
          aws ecs wait services-inactive \
            --cluster my-app-cluster \
            --services nextjs-task-service-t2q09utt
          
          # Get the correct target group ARN
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
            --names my-app-targetgroup \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text)
          
          # Get subnets and security groups from the old service config
          SUBNETS=$(echo $SERVICE_CONFIG | jq -r '.networkConfiguration.awsvpcConfiguration.subnets | join(",")')
          SECURITY_GROUPS=$(echo $SERVICE_CONFIG | jq -r '.networkConfiguration.awsvpcConfiguration.securityGroups | join(",")')
          ASSIGN_PUBLIC_IP=$(echo $SERVICE_CONFIG | jq -r '.networkConfiguration.awsvpcConfiguration.assignPublicIp')
          
          echo "Recreating service with correct target group..."
          aws ecs create-service \
            --cluster my-app-cluster \
            --service-name nextjs-task-service-t2q09utt \
            --task-definition "${{ steps.task-def.outputs.taskdef_arn }}" \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=$ASSIGN_PUBLIC_IP}" \
            --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=nextjs-container,containerPort=3000"
          
          echo "Service recreated successfully"

      - name: Update ECS Service (if no recreation needed)
        if: steps.check-service.outputs.needs_recreation == 'false'
        run: |
          echo "Updating ECS service with new task definition..."
          aws ecs update-service \
            --cluster my-app-cluster \
            --service nextjs-task-service-t2q09utt \
            --task-definition "${{ steps.task-def.outputs.taskdef_arn }}" \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster my-app-cluster \
            --services nextjs-task-service-t2q09utt
          echo "Deployment completed successfully!"