import { NextRequest, NextResponse } from 'next/server';
import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';
import { createBedrockClient } from '@/lib/bedrock';
import OpenAI from 'openai';
import { createActivity } from '@/lib/db';

// Track processed requests to prevent duplicates
const processedRequests = new Set<string>();

export async function POST(req: NextRequest) {
  const startTime = Date.now();

  try {
    const body = await req.json();
    const { text } = body;
    const userEmail = body.userEmail || 'anonymous@example.com';
    const requestId = body.requestId || `${Date.now()}-${Math.random()}`;

    // Check for duplicate requests
    if (processedRequests.has(requestId)) {
      console.log(`⚠️ Duplicate picture request detected: ${requestId}`);
      return NextResponse.json({ 
        error: "Duplicate request detected" 
      }, { status: 409 });
    }

    // Mark this request as being processed
    processedRequests.add(requestId);

    // Clean up old request IDs after 5 minutes
    setTimeout(() => {
      processedRequests.delete(requestId);
    }, 5 * 60 * 1000);

    if (!text) {
      return NextResponse.json({ error: 'Text is required' }, { status: 400 });
    }

    // Use OpenAI to generate a concise prompt
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const openaiPrompt = `Analyze the following text and generate a safe, descriptive prompt for an image generation model.

**CRITICAL SAFETY REQUIREMENTS:**
- **Compliance:** The prompt MUST strictly adhere to the AWS Responsible AI Policy.
- **Sanitization:** Aggressively remove or rephrase any themes related to violence, conflict, hate speech, sexual content, or other sensitive topics.
- **Clarity and Neutrality:** The prompt must be neutral, descriptive, and suitable for a general audience.
- **Focus on Visuals:** Describe a visual scene. Do not include abstract or controversial concepts. For example, instead of "a prompt about war," generate "a historical map showing troop movements" or "a peaceful landscape with rolling hills."

**Task:**
Generate a single, safe sentence that describes a visual scene based on the text below.

Text to analyze:
${text}`;

    const openaiResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an AI assistant that specializes in rephrasing and sanitizing user-provided text to create safe, policy-compliant prompts for a downstream image generation AI. Your absolute priority is to generate prompts that will not be blocked by content filters, specifically the AWS Responsible AI Policy. You must remove or rephrase any content that is violent, hateful, sexually explicit, or otherwise sensitive."
        },
        {
          role: "user",
          content: openaiPrompt
        }
      ],
      temperature: 0.5,
      max_tokens: 100
    });

    const generatedPrompt = openaiResponse.choices[0]?.message?.content;
    if (!generatedPrompt) {
      throw new Error("No prompt generated by OpenAI");
    }

    const client = createBedrockClient();

    const response = await client.send(
      new InvokeModelCommand({
        modelId: 'amazon.titan-image-generator-v1',
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify({
          taskType: "TEXT_IMAGE",
          textToImageParams: {
            text: generatedPrompt,
          },
          imageGenerationConfig: {
            numberOfImages: 1,
            quality: "standard",
            height: 512,
            width: 512,
            cfgScale: 8.0,
            seed: 0,
          },
        }),
      })
    );

    const responseBody = JSON.parse(new TextDecoder().decode(response.body));
    const base64ImageData = responseBody.images[0];
    const imageUrl = `data:image/png;base64,${base64ImageData}`;

    // Calculate duration
    const duration = Date.now() - startTime;

    // Create a simple title from the first sentence
    const firstSentence = text.split(/[.!?]+/)[0].trim();
    const title = firstSentence.length > 50 ? 
      firstSentence.substring(0, 47) + '...' : 
      firstSentence;

    // Save activity to database
    try {
      const activityId = await createActivity({
        userEmail: userEmail,
        type: 'picture',
        title: title,
        inputText: text.substring(0, 500), // Store first 500 chars
        result: {
          imageUrl: imageUrl.substring(0, 100) + '...', // Store truncated base64 for reference
          prompt: generatedPrompt,
          hasImage: true
        },
        status: 'completed',
        duration: duration,
        metadata: {
          model: 'Titan Image Generator + OpenAI',
          generatedPrompt: generatedPrompt,
          imageSize: '512x512',
          tags: [
            '512x512',
            'AI Generated',
            'Titan Image'
          ],
          originalTitle: title
        }
      });

      console.log(`✅ Picture activity saved with ID: ${activityId}`);
    } catch (dbError) {
      console.error('❌ Failed to save picture activity to database:', dbError);
      // Don't fail the request if database save fails
    }

    return NextResponse.json({ imageUrl });
  } catch (error: any) {
    console.error('Error generating image:', JSON.stringify(error, null, 2));

    // Check for content filter error and return a user-friendly message
    if (error.message && error.message.includes('blocked by our content filters')) {
      return NextResponse.json({
        error: 'Content Filtered',
        details: 'The generated prompt was blocked by the AWS content filter. Please try rephrasing your input to be less specific about sensitive topics.'
      }, { status: 400 });
    }

    return NextResponse.json({ error: 'Failed to generate image', details: error.message }, { status: 500 });
  }
}
