import { NextRequest, NextResponse } from 'next/server';
import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';
import { createBedrockClient } from '@/lib/bedrock';
import OpenAI from 'openai';

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { text } = body;

    if (!text) {
      return NextResponse.json({ error: 'Text is required' }, { status: 400 });
    }

    // Use OpenAI to generate a concise prompt
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const openaiPrompt = `Based on the following text, generate a short, descriptive prompt for an image generation model. The prompt should be a single sentence that captures the main subject and visual elements.

Text to analyze:
${text}`;

    const openaiResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "You are an expert in creating concise, effective prompts for image generation models."
        },
        {
          role: "user",
          content: openaiPrompt
        }
      ],
      temperature: 0.7,
      max_tokens: 100
    });

    const generatedPrompt = openaiResponse.choices[0]?.message?.content;
    if (!generatedPrompt) {
      throw new Error("No prompt generated by OpenAI");
    }

    const client = createBedrockClient();

    const response = await client.send(
      new InvokeModelCommand({
        modelId: 'amazon.titan-image-generator-v1',
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify({
          taskType: "TEXT_IMAGE",
          textToImageParams: {
            text: generatedPrompt,
          },
          imageGenerationConfig: {
            numberOfImages: 1,
            quality: "standard",
            height: 512,
            width: 512,
            cfgScale: 8.0,
            seed: 0,
          },
        }),
      })
    );

    const responseBody = JSON.parse(new TextDecoder().decode(response.body));
    const base64ImageData = responseBody.images[0];
    const imageUrl = `data:image/png;base64,${base64ImageData}`;

    return NextResponse.json({ imageUrl });
  } catch (error: any) {
    console.error('Error generating image:', JSON.stringify(error, null, 2));
    return NextResponse.json({ error: 'Failed to generate image', details: error.message }, { status: 500 });
  }
}
